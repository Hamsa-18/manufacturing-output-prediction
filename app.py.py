# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11bUGu3eTAlKW9HwFTOpl0iL78CTWVdBC
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install streamlit

import streamlit as st
import numpy as np
import pandas as pd
import joblib
import os

# ========================
# Load Model and Scaler
# ========================
MODEL_PATH = "linear_regression_model.pkl"
SCALER_PATH = "scaler.pkl"

st.set_page_config(page_title="🏭 Manufacturing Output Predictor", layout="centered")

st.title("🏭 Manufacturing Equipment Output Prediction")
st.write("Enter the input parameters below to predict the number of parts produced per hour.")

# --- Error handling for missing files ---
if not os.path.exists(MODEL_PATH) or not os.path.exists(SCALER_PATH):
    st.error("❌ Model or scaler not found. Please make sure 'linear_regression_model.pkl' and 'scaler.pkl' are in the same folder as this app or provide the full path.")
    st.stop()

model = joblib.load(MODEL_PATH)
scaler = joblib.load(SCALER_PATH)

# ========================
# Define Input Fields
# ========================
st.subheader("🔧 Input Parameters")

# These should match your training dataset columns (auto or manual)
# If unsure, list the columns printed by main.py
# Example input fields (edit names to match dataset)
col1, col2 = st.columns(2)

with col1:
    machine_speed = st.number_input("Machine Speed (rpm)", min_value=0.0)
    temperature = st.number_input("Temperature (°C)", min_value=0.0)
    pressure = st.number_input("Pressure (bar)", min_value=0.0)

with col2:
    material_density = st.number_input("Material Density (g/cm³)", min_value=0.0)
    mold_cavity = st.number_input("Mold Cavity (count)", min_value=1)
    cycle_time = st.number_input("Cycle Time (sec)", min_value=0.0)

# ========================
# Predict Button
# ========================
if st.button("🔍 Predict Output"):
    # Input order must match training feature order
    input_data = np.array([[machine_speed, temperature, pressure, material_density, mold_cavity, cycle_time]])

    # Scale input
    input_scaled = scaler.transform(input_data)

    # Predict
    prediction = model.predict(input_scaled)[0]

    st.success(f"✅ Predicted Parts per Hour: **{prediction:.2f}**")

st.caption("Model trained using Linear Regression and StandardScaler (scikit-learn).")

!ls /content

import os
st.write("📂 Files in current folder:", os.listdir("."))

