# -*- coding: utf-8 -*-
"""main.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1riZMRcSBlGY1eMbK3KC-2m6tbWIeJe8T
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import joblib
import os

# === CONFIGURATION ===
DATA_PATH = "/content/manufacturing_dataset_1000_samples (1).csv"  # change to .csv if needed
TARGET = "Parts_Per_Hour"  # your prediction column name
OUT_DIR = "."  # save model in current directory

# === LOAD DATA ===
try:
    if DATA_PATH.endswith(".csv"):
        df = pd.read_csv(DATA_PATH)
    else:
        df = pd.read_excel(DATA_PATH)
except FileNotFoundError:
    raise Exception(f"‚ùå File not found: {DATA_PATH}")

print("‚úÖ Dataset loaded successfully!")
print("\nAvailable columns:\n", df.columns.tolist())

# === VALIDATE TARGET ===
if TARGET not in df.columns:
    raise Exception(f"‚ùå Target column '{TARGET}' not found in dataset!")

# === SELECT NUMERIC FEATURES ===
numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()

# Remove target column from features
FEATURES = [col for col in numeric_cols if col != TARGET]

if not FEATURES:
    raise Exception("‚ùå No numeric columns found for training!")

print("\nUsing features:", FEATURES)
print("Target:", TARGET)

# === DROP ROWS WITH NaN VALUES ===
df_cleaned = df.dropna(subset=FEATURES + [TARGET])
print(f"\nDropped {len(df) - len(df_cleaned)} rows with missing values.")

# === SPLIT DATA ===
X = df_cleaned[FEATURES]
y = df_cleaned[TARGET]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# === SCALE FEATURES ===
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# === TRAIN MODEL ===
model = LinearRegression()
model.fit(X_train_scaled, y_train)

# === EVALUATE MODEL ===
pred = model.predict(X_test_scaled)
rmse = mean_squared_error(y_test, pred)
r2 = r2_score(y_test, pred)

print(f"\n‚úÖ Model trained successfully!")
print(f"RMSE: {rmse:.3f}")
print(f"R¬≤ Score: {r2:.3f}")

# === SAVE MODEL AND SCALER ===
os.makedirs(OUT_DIR, exist_ok=True)
joblib.dump(model, os.path.join(OUT_DIR, "linear_regression_model.pkl"))
joblib.dump(scaler, os.path.join(OUT_DIR, "scaler.pkl"))

print("\nüíæ Model and scaler saved successfully!")
print("Files created:")
print(" - linear_regression_model.pkl")
print(" - scaler.pkl")
